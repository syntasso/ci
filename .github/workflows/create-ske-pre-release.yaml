name: Create SKE Pre-release

on:
  workflow_dispatch:

jobs:
  # create-pre-release:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out enterprise kratix
  #       uses: actions/checkout@v4
  #       with:
  #         repository: syntasso/enterprise-kratix
  #         ssh-key: ${{ secrets.ENTERPRISE_KRATIX_DEPLOY_KEY_READ_PUSH }}
  #         ref: ${{ github.event.inputs.ske_sha }}
  #         submodules: recursive
  #     - name: Install Helm
  #       uses: azure/setup-helm@v3
  #     - name: Login to ghcr
  #       run: |
  #         echo "${{ secrets.GHCR_TOKEN }}" | docker login --username syntassodev --password-stdin ghcr.io
  #         echo "${{ secrets.GHCR_TOKEN }}" | docker login --username syntassodev --password-stdin registry.syntasso.io
  #     - name: Build and push SKE at next RC
  #       env:
  #         GH_TOKEN: ${{ secrets.ENTERPRISE_KRATIX_GH_TOKEN }}
  #       run: |
  #         ./scripts/push-ske-rc-images.sh
  #     - name: Create and push pre-release tag
  #       env:
  #         GH_TOKEN: ${{ secrets.ENTERPRISE_KRATIX_GH_TOKEN }}
  #       run: |
  #         make distribution
  #         new_tag=$(./scripts/tag-new-rc-version)
  #         echo "NEW_TAG=$new_tag" >> "$GITHUB_ENV"
  #     - name: Check out Helm Charts
  #       uses: actions/checkout@v4
  #       with:
  #         repository: syntasso/helm-charts
  #         branch: kratix-v0.0.0-latest
  #         fetch-depth: 1
  #         path: charts
  #     - name: Generate Helm Chart with SKE distribution
  #       run: |
  #         ./charts/scripts/generate-templates-and-crds ./ske-distribution.yaml
  #     - name: Package Kratix Helm Chart at Pre-Release version
  #       run: |
  #         echo "NEW_TAG is $NEW_TAG"
  #         helm package charts/kratix/ --version $NEW_TAG
  #         mv kratix-$NEW_TAG.tgz kratix-helm-chart-$NEW_TAG.tgz
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: eu-west-2
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     - name: Create Github release and upload artifacts to s3
  #       run: |
  #         ./scripts/create-pre-release-and-upload-artifacts
  #       env:
  #         GH_TOKEN: ${{ secrets.ENTERPRISE_KRATIX_GH_TOKEN }}

  upgrade-lre:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ENTERPRISE_KRATIX_TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ENTERPRISE_KRATIX_TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.EKS_KUBECTL_ADMIN_ROLE_ARN }}
          role-session-name: test
          role-skip-session-tagging: true
      - uses: hashicorp/setup-terraform@v3
      - name: Check out enterprise kratix
        uses: actions/checkout@v4
        with:
          repository: syntasso/enterprise-kratix
          ssh-key: ${{ secrets.ENTERPRISE_KRATIX_DEPLOY_KEY_READ_PUSH }}
          ref: ${{ github.event.inputs.ske_sha }}
          submodules: recursive
      - name: Authenticate against LRE
        run: |
          ./scripts/authenticate-against-lre
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.16.4
      - name: Upgrade LRE
        run: |
          latest_rc="$(gh release list --json tagName --jq '.[0].tagName')"
          ./scripts/upgrade-lre $latest_rc
        env:
          GH_TOKEN: ${{ secrets.ENTERPRISE_KRATIX_GH_TOKEN }}
          SKE_LICENSE_TOKEN: ${{ secrets.SKE_LICENSE_TOKEN }}
